# Makefile for Solidus Project
.PHONY: help install setup migrate test lint format clean build up down logs shell superuser fixtures backup restore

# Default target
help:
	@echo "Available commands:"
	@echo "  install     - Install Python dependencies"
	@echo "  setup       - Initial project setup"
	@echo "  migrate     - Run database migrations"
	@echo "  test        - Run tests"
	@echo "  lint        - Run code linting"
	@echo "  format      - Format code with black"
	@echo "  clean       - Clean up generated files"
	@echo "  build       - Build Docker image"
	@echo "  up          - Start Docker containers"
	@echo "  down        - Stop Docker containers"
	@echo "  logs        - View Docker logs"
	@echo "  shell       - Open Django shell"
	@echo "  superuser   - Create superuser"
	@echo "  fixtures    - Load initial data fixtures"
	@echo "  backup      - Backup database"
	@echo "  restore     - Restore database from backup"

# Development setup
install:
	pip install -r requirements.txt

setup: install
	@echo "Setting up Solidus project..."
	python manage.py migrate
	python manage.py collectstatic --noinput
	@echo "Setup complete!"

migrate:
	python manage.py makemigrations
	python manage.py migrate

# Testing and quality
test:
	python manage.py test --verbosity=2

lint:
	flake8 src/
	pylint src/ --load-plugins=pylint_django --django-settings-module=solidus.settings

format:
	black src/
	isort src/

# Cleanup
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/

# Docker commands
build:
	docker-compose build

up:
	docker-compose up -d

down:
	docker-compose down

logs:
	docker-compose logs -f

restart: down up

# Database operations
shell:
	python manage.py shell

dbshell:
	python manage.py dbshell

superuser:
	python manage.py createsuperuser

fixtures:
	python manage.py loaddata fixtures/initial_data.json

# Backup and restore
backup:
	@echo "Creating database backup..."
	docker-compose exec db pg_dump -U solidus solidus > backups/solidus_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "Backup created in backups/ directory"

restore:
	@read -p "Enter backup file name: " backup_file; \
	docker-compose exec -T db psql -U solidus -d solidus < backups/$$backup_file

# Asset processing
process-assets:
	python manage.py process_assets

generate-thumbnails:
	python manage.py generate_thumbnails

# Feed operations
generate-feeds:
	python manage.py generate_scheduled_feeds

# Monitoring and maintenance
health-check:
	curl -f http://localhost:8000/health/ || echo "Service not healthy"

check-services:
	docker-compose ps

# Production commands
deploy:
	@echo "Deploying to production..."
	docker-compose -f docker-compose.prod.yml up -d --build
	docker-compose -f docker-compose.prod.yml exec web python manage.py migrate
	docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput
	@echo "Deployment complete!"

prod-logs:
	docker-compose -f docker-compose.prod.yml logs -f

prod-down:
	docker-compose -f docker-compose.prod.yml down

# SSL certificate management (for production)
ssl-cert:
	certbot --nginx -d your-domain.com

ssl-renew:
	certbot renew --quiet

# Development utilities
dev-data:
	python manage.py create_dev_data

reset-db:
	@echo "WARNING: This will delete all data!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	docker-compose down
	docker volume rm solidus_postgres_data
	docker-compose up -d db
	sleep 10
	make migrate
	make fixtures

# Code analysis
coverage:
	coverage run --source='.' manage.py test
	coverage report
	coverage html

security-check:
	bandit -r src/
	safety check

# Documentation
docs:
	cd docs && make html

docs-serve:
	cd docs/_build/html && python -m http.server 8080

# Environment management
env-example:
	cp .env.example .env
	@echo "Created .env file from example. Please update with your settings."

# Performance testing
load-test:
	locust -f tests/load_test.py --host=http://localhost:8000

# Data management
export-data:
	python manage.py dumpdata --natural-foreign --natural-primary > data/solidus_data.json

import-data:
	python manage.py loaddata data/solidus_data.json

# Monitoring
monitor:
	docker-compose exec web python manage.py monitor_system

# Cache management
clear-cache:
	python manage.py clear_cache

warm-cache:
	python manage.py warm_cache

# Search index management
rebuild-index:
	python manage.py rebuild_search_index

# Task queue management
worker:
	python manage.py runworker

scheduler:
	python manage.py runscheduler

# Asset optimization
optimize-images:
	python manage.py optimize_images

# Audit commands
audit-log:
	python manage.py export_audit_log

audit-cleanup:
	python manage.py cleanup_old_audit_logs

# System checks
check:
	python manage.py check

check-deploy:
	python manage.py check --deploy

# Translation management (if needed)
makemessages:
	python manage.py makemessages -l en

compilemessages:
	python manage.py compilemessages

# Version management
version:
	@echo "Solidus Version: $(shell python -c 'import src; print(src.__version__)')"

# Quick development reset
dev-reset: clean reset-db dev-data
	@echo "Development environment reset complete!"

# All-in-one development start
dev: up
	@echo "Waiting for services to start..."
	sleep 10
	make migrate
	@echo "Development environment ready at http://localhost:8000"

# Production health check
prod-health:
	@echo "Checking production services..."
	curl -f https://your-domain.com/health/ || echo "Production service not healthy"
	docker-compose -f docker-compose.prod.yml ps