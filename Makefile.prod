# Makefile.prod
# Production Makefile for Solidus Project

# Variables
DOCKER_COMPOSE_PROD = docker-compose -f docker-compose.prod.yml
PROJECT_NAME = solidus
VERSION ?= latest
REGISTRY ?= your-registry.com

# Help command
.PHONY: help
help:
	@echo "üöÄ Solidus Production Commands"
	@echo ""
	@echo "üèóÔ∏è  Build & Deploy:"
	@echo "  make build            - Build Docker images"
	@echo "  make rebuild          - Build images with no cache"
	@echo "  make deploy           - Deploy to production"
	@echo "  make rollback         - Rollback to previous version"
	@echo "  make update           - Update running services"
	@echo ""
	@echo "üê≥ Container Management:"
	@echo "  make up               - Start production services"
	@echo "  make down             - Stop production services"
	@echo "  make restart          - Restart all services"
	@echo "  make scale            - Scale services"
	@echo ""
	@echo "üóÑÔ∏è  Database Operations:"
	@echo "  make migrate          - Run database migrations"
	@echo "  make backup           - Create database backup"
	@echo "  make restore          - Restore from backup"
	@echo "  make db-migrate-check - Check pending migrations"
	@echo ""
	@echo "üìä Monitoring & Maintenance:"
	@echo "  make logs             - View service logs"
	@echo "  make status           - Check service status"
	@echo "  make health           - Health check all services"
	@echo "  make stats            - Resource usage statistics"
	@echo ""
	@echo "üîß Maintenance:"
	@echo "  make collectstatic    - Collect static files"
	@echo "  make clean            - Clean unused resources"
	@echo "  make ssl-renew        - Renew SSL certificates"
	@echo ""
	@echo "üîí Security:"
	@echo "  make security-check   - Run security scans"
	@echo "  make update-secrets   - Update production secrets"

# Build and deployment
.PHONY: build
build:
	@echo "üèóÔ∏è  Building production images..."
	$(DOCKER_COMPOSE_PROD) build --no-cache
	@echo "‚úÖ Build complete!"

.PHONY: build-push
build-push: build
	@echo "üì§ Pushing images to registry..."
	docker tag $(PROJECT_NAME)_web:latest $(REGISTRY)/$(PROJECT_NAME):$(VERSION)
	docker tag $(PROJECT_NAME)_nginx:latest $(REGISTRY)/$(PROJECT_NAME)-nginx:$(VERSION)
	docker push $(REGISTRY)/$(PROJECT_NAME):$(VERSION)
	docker push $(REGISTRY)/$(PROJECT_NAME)-nginx:$(VERSION)
	@echo "‚úÖ Images pushed!"

.PHONY: deploy
deploy:
	@echo "üöÄ Deploying to production..."
	@echo "‚ö†Ô∏è  This will update the production environment!"
	@read -p "Continue? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(DOCKER_COMPOSE_PROD) pull; \
		$(DOCKER_COMPOSE_PROD) up -d --remove-orphans; \
		$(MAKE) migrate; \
		$(MAKE) collectstatic; \
		$(MAKE) health; \
		echo "‚úÖ Deployment complete!"; \
	else \
		echo "‚ùå Deployment cancelled"; \
	fi

.PHONY: rollback
rollback:
	@echo "‚è™ Rolling back to previous version..."
	@read -p "Enter version to rollback to: " version; \
	if [ -n "$$version" ]; then \
		docker pull $(REGISTRY)/$(PROJECT_NAME):$$version; \
		docker pull $(REGISTRY)/$(PROJECT_NAME)-nginx:$$version; \
		docker tag $(REGISTRY)/$(PROJECT_NAME):$$version $(PROJECT_NAME)_web:latest; \
		docker tag $(REGISTRY)/$(PROJECT_NAME)-nginx:$$version $(PROJECT_NAME)_nginx:latest; \
		$(DOCKER_COMPOSE_PROD) up -d; \
		echo "‚úÖ Rollback complete!"; \
	fi

# Container management
.PHONY: up
up:
	@echo "üöÄ Starting production services..."
	$(DOCKER_COMPOSE_PROD) up -d
	@echo "‚úÖ Services started!"

.PHONY: down
down:
	@echo "üõë Stopping production services..."
	$(DOCKER_COMPOSE_PROD) down
	@echo "‚úÖ Services stopped!"

.PHONY: restart
restart:
	@echo "üîÑ Restarting services..."
	$(DOCKER_COMPOSE_PROD) restart
	@echo "‚úÖ Services restarted!"

.PHONY: scale
scale:
	@echo "üìà Scaling services..."
	@read -p "Web replicas: " web_replicas; \
	$(DOCKER_COMPOSE_PROD) up -d --scale web=$$web_replicas

# Database operations
.PHONY: migrate
migrate:
	@echo "üîÑ Running migrations..."
	$(DOCKER_COMPOSE_PROD) exec web python manage.py migrate
	@echo "‚úÖ Migrations complete!"

.PHONY: db-migrate-check
db-migrate-check:
	@echo "üîç Checking for pending migrations..."
	$(DOCKER_COMPOSE_PROD) exec web python manage.py showmigrations --plan

.PHONY: backup
backup:
	@echo "üíæ Creating database backup..."
	@mkdir -p backups/production
	$(DOCKER_COMPOSE_PROD) exec postgres pg_dump -U solidus solidus | gzip > backups/production/solidus_$(shell date +%Y%m%d_%H%M%S).sql.gz
	@echo "‚úÖ Backup created!"

.PHONY: restore
restore:
	@echo "üì• Database restore..."
	@echo "‚ö†Ô∏è  This will overwrite the production database!"
	@read -p "Backup file name: " backup_file; \
	if [ -f "backups/production/$$backup_file" ]; then \
		read -p "Are you sure? [y/N] " -n 1 -r; \
		echo; \
		if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
			gunzip -c backups/production/$$backup_file | $(DOCKER_COMPOSE_PROD) exec -T postgres psql -U solidus -d solidus; \
			echo "‚úÖ Restore complete!"; \
		fi; \
	else \
		echo "‚ùå Backup file not found!"; \
	fi

# Monitoring and logs
.PHONY: logs
logs:
	$(DOCKER_COMPOSE_PROD) logs -f

.PHONY: logs-web
logs-web:
	$(DOCKER_COMPOSE_PROD) logs -f web

.PHONY: logs-nginx
logs-nginx:
	$(DOCKER_COMPOSE_PROD) logs -f nginx

.PHONY: logs-postgres
logs-postgres:
	$(DOCKER_COMPOSE_PROD) logs -f postgres

.PHONY: status
status:
	@echo "üìä Service Status:"
	$(DOCKER_COMPOSE_PROD) ps

.PHONY: health
health:
	@echo "üè• Health check..."
	@for service in web nginx postgres redis; do \
		echo -n "$$service: "; \
		if $(DOCKER_COMPOSE_PROD) exec $$service sh -c 'exit 0' 2>/dev/null; then \
			echo "‚úÖ Healthy"; \
		else \
			echo "‚ùå Unhealthy"; \
		fi; \
	done
	@echo ""
	@echo "üåê HTTP Health Check:"
	@curl -f -s -o /dev/null https://$(DOMAIN)/health/ && echo "‚úÖ Web service healthy" || echo "‚ùå Web service unhealthy"

.PHONY: stats
stats:
	@echo "üìä Resource Usage:"
	docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

# Maintenance
.PHONY: collectstatic
collectstatic:
	@echo "üìÅ Collecting static files..."
	$(DOCKER_COMPOSE_PROD) exec web python manage.py collectstatic --noinput
	@echo "‚úÖ Static files collected!"

.PHONY: clean
clean:
	@echo "üßπ Cleaning unused resources..."
	docker system prune -f
	docker volume prune -f
	docker image prune -f
	@echo "‚úÖ Cleanup complete!"

.PHONY: ssl-renew
ssl-renew:
	@echo "üîí Renewing SSL certificates..."
	$(DOCKER_COMPOSE_PROD) exec nginx certbot renew --nginx
	$(DOCKER_COMPOSE_PROD) exec nginx nginx -s reload
	@echo "‚úÖ SSL certificates renewed!"

# Security
.PHONY: security-check
security-check:
	@echo "üîç Running security checks..."
	$(DOCKER_COMPOSE_PROD) exec web python manage.py check --deploy
	@echo "üîç Checking for security updates..."
	$(DOCKER_COMPOSE_PROD) exec web python -m pip list --outdated

.PHONY: update-secrets
update-secrets:
	@echo "üîí Updating production secrets..."
	@echo "‚ö†Ô∏è  This will restart services with new secrets!"
	@read -p "Continue? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(MAKE) down; \
		echo "üìù Update your .env.prod file with new secrets"; \
		read -p "Press enter when ready..."; \
		$(MAKE) up; \
	fi

# Backup scheduling
.PHONY: setup-backup-cron
setup-backup-cron:
	@echo "‚è∞ Setting up automated backups..."
	@echo "0 2 * * * cd $(PWD) && make backup" | crontab -
	@echo "‚úÖ Daily backup scheduled for 2 AM!"

# Performance monitoring
.PHONY: performance-check
performance-check:
	@echo "‚ö° Performance check..."
	@echo "üîç Database connections:"
	$(DOCKER_COMPOSE_PROD) exec postgres psql -U solidus -d solidus -c "SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = 'active';"
	@echo "üîç Cache status:"
	$(DOCKER_COMPOSE_PROD) exec redis redis-cli info memory | grep used_memory_human
	@echo "üîç Disk usage:"
	df -h

# Log rotation
.PHONY: rotate-logs
rotate-logs:
	@echo "üîÑ Rotating logs..."
	docker logs $(PROJECT_NAME)_web_1 > logs/web_$(shell date +%Y%m%d_%H%M%S).log 2>&1
	docker logs $(PROJECT_NAME)_nginx_1 > logs/nginx_$(shell date +%Y%m%d_%H%M%S).log 2>&1
	$(DOCKER_COMPOSE_PROD) restart
	@echo "‚úÖ Logs rotated!"

# Environment validation
.PHONY: validate-env
validate-env:
	@echo "‚úÖ Validating production environment..."
	@test -f .env.prod || (echo "‚ùå .env.prod file missing!" && exit 1)
	@test -n "$(DOMAIN)" || (echo "‚ùå DOMAIN not set!" && exit 1)
	@test -n "$(SECRET_KEY)" || (echo "‚ùå SECRET_KEY not set!" && exit 1)
	@echo "‚úÖ Environment validation passed!"

# Quick deployment (for CI/CD)
.PHONY: ci-deploy
ci-deploy: validate-env build
	@echo "ü§ñ CI/CD Deployment..."
	$(DOCKER_COMPOSE_PROD) up -d --remove-orphans
	$(MAKE) migrate
	$(MAKE) collectstatic
	$(MAKE) health
	@echo "‚úÖ CI/CD Deployment complete!"

# This is the magic that prevents "No rule to make target 'web'" errors
%:
	@: