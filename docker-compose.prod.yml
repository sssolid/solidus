# docker-compose.prod.yml

services:
  postgres:
    image: postgres:15-alpine
    container_name: solidus_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: solidus_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    container_name: solidus_web_prod
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn solidus.wsgi:application 
          --bind 0.0.0.0:8000 
          --workers 4 
          --worker-class gthread 
          --threads 2 
          --worker-connections 1000 
          --max-requests 1000 
          --max-requests-jitter 100 
          --timeout 30 
          --keep-alive 2 
          --access-logfile - 
          --error-logfile -
      "
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
      - ./logs:/app/logs
    expose:
      - "8000"
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  websocket:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    container_name: solidus_websocket_prod
    command: >
      daphne -b 0.0.0.0 -p 8001 
        --proxy-headers 
        --access-log /app/logs/daphne-access.log 
        solidus.asgi:application
    volumes:
      - media_data:/app/media
      - ./logs:/app/logs
    expose:
      - "8001"
    env_file:
      - .env.prod
    depends_on:
      - web
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: solidus_worker_prod
    command: >
      sh -c "
        while true; do
          python manage.py process_assets --batch-size 10;
          python manage.py generate_feeds;
          python manage.py cleanup_old_logs --days 30;
          sleep 300;
        done
      "
    volumes:
      - media_data:/app/media
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - postgres
      - redis
      - web
    restart: unless-stopped
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    build:
      context: ./config/nginx
      dockerfile: Dockerfile
    container_name: solidus_nginx_prod
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available/solidus.conf:/etc/nginx/sites-available/default:ro
      - static_data:/app/static:ro
      - media_data:/app/media:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - certbot_data:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - websocket
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - solidus_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot
    container_name: solidus_certbot_prod
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl
    networks:
      - solidus_network

  backup:
    image: postgres:15-alpine
    container_name: solidus_backup_prod
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U ${DB_USER} ${DB_NAME} | gzip > /backups/solidus_$(date +%Y%m%d_%H%M%S).sql.gz
          find /backups -name '*.sql.gz' -mtime +7 -delete
          sleep 86400
        done
      "
    volumes:
      - ./backups:/backups
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - backup
    networks:
      - solidus_network

  monitoring:
    image: prom/prometheus
    container_name: solidus_monitoring_prod
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - solidus_network

  grafana:
    image: grafana/grafana
    container_name: solidus_grafana_prod
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - monitoring
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - solidus_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  certbot_data:
    driver: local
  certbot_www:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  solidus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16