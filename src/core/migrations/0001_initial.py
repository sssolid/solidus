# Generated by Django 5.0.1 on 2025-08-04 16:02

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SystemSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=100, unique=True)),
                ("value", models.TextField()),
                (
                    "setting_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("json", "JSON"),
                        ],
                        default="string",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this setting is visible to non-staff users",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "system_settings",
                "ordering": ["key"],
            },
        ),
        migrations.CreateModel(
            name="FileImport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("import_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "import_type",
                    models.CharField(
                        choices=[
                            ("products", "Products"),
                            ("pricing", "Pricing"),
                            ("inventory", "Inventory"),
                            ("assets", "Assets"),
                            ("fitment", "Fitment Data"),
                        ],
                        max_length=30,
                    ),
                ),
                ("original_filename", models.CharField(max_length=255)),
                ("file_path", models.CharField(max_length=500)),
                ("file_size", models.BigIntegerField()),
                ("file_hash", models.CharField(max_length=64)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_rows", models.IntegerField(blank=True, null=True)),
                ("processed_rows", models.IntegerField(default=0)),
                ("successful_rows", models.IntegerField(default=0)),
                ("failed_rows", models.IntegerField(default=0)),
                ("error_log", models.JSONField(blank=True, default=list)),
                ("validation_errors", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("import_config", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="file_imports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "file_imports",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["import_type", "status"],
                        name="file_import_import__fc54e0_idx",
                    ),
                    models.Index(
                        fields=["created_by", "created_at"],
                        name="file_import_created_43fa79_idx",
                    ),
                    models.Index(
                        fields=["import_id"], name="file_import_import__7f78b1_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("product_update", "Product Update"),
                            ("price_change", "Price Change"),
                            ("new_asset", "New Asset"),
                            ("feed_ready", "Feed Ready"),
                            ("system", "System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("message", models.TextField()),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                ("action_url", models.CharField(blank=True, max_length=500)),
                ("action_label", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read", "created_at"],
                        name="notificatio_user_id_5cf777_idx",
                    ),
                    models.Index(
                        fields=["notification_type"],
                        name="notificatio_notific_19df93_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="notificatio_expires_66996e_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TaskQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("asset_processing", "Asset Processing"),
                            ("feed_generation", "Feed Generation"),
                            ("bulk_update", "Bulk Update"),
                            ("notification", "Notification"),
                            ("cleanup", "Cleanup"),
                        ],
                        max_length=30,
                    ),
                ),
                ("task_data", models.JSONField(default=dict)),
                ("priority", models.IntegerField(default=5)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("attempts", models.IntegerField(default=0)),
                ("max_attempts", models.IntegerField(default=3)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "scheduled_for",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("result", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "task_queue",
                "ordering": ["priority", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "scheduled_for"],
                        name="task_queue_status_27aa57_idx",
                    ),
                    models.Index(
                        fields=["task_type", "status"],
                        name="task_queue_task_ty_553e74_idx",
                    ),
                    models.Index(
                        fields=["task_id"], name="task_queue_task_id_29a043_idx"
                    ),
                ],
            },
        ),
    ]
